{"version":3,"sources":["utility.ts","dynamicForm.ts"],"names":[],"mappings":"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","file":"dynamicForm.8a9e16c8.js","sourceRoot":"..\\tasks\\dynamicForm","sourcesContent":["\r\nconst isParameterAnArray = (parameter: [] | string) => {\r\n    return Array.isArray(parameter)\r\n}\r\n\r\nconst addAttributeToElement = (mainElement: HTMLElement, attributeName: string, attribiuteValue: string) => {\r\n    return mainElement.setAttribute(attributeName, attribiuteValue)\r\n}\r\n\r\nconst addAndCreateElement = (mainElement: HTMLElement, elementToCreate: string) => {\r\n    const newElement = document.createElement(elementToCreate)\r\n    return mainElement.appendChild(newElement)\r\n\r\n}\r\n\r\n\r\nexport { isParameterAnArray, addAttributeToElement, addAndCreateElement }","import { Body } from \"node-fetch\";\r\nimport { isParameterAnArray, addAttributeToElement, addAndCreateElement } from \"./utility\"\r\n\r\n\r\nconst testSettings = {\r\n    action: '/contact/by-mail',\r\n    method: 'POST',\r\n    inputs: [\r\n        { type: 'header' },\r\n        { type: 'header', label: 'Skontaktuj się z nami' },\r\n        { name: 'yourEmail', type: 'email', placeholder: 'Wpisz swój email' },\r\n        { type: 'email' },\r\n        { name: 'content', type: 'textarea', placeholder: 'Wpisz treść wiadomości' },\r\n        { type: 'submit', label: 'Wyślij wiadomość' }\r\n    ]\r\n}\r\n\r\ninterface ISettings {\r\n    action: string,\r\n    method: string,\r\n    inputs: Array<{ type: string }>\r\n    //problem z otypowaniem inputs\r\n}\r\n\r\n\r\n\r\n\r\n\r\nconst generateFormOnPattern = (settings: any): any => {\r\n    const wrapper = document.querySelector(\".wrapper\") as HTMLElement\r\n    const generatedForm = document.createElement(\"form\") \r\n    wrapper.appendChild(generatedForm)\r\n    console.log(wrapper);\r\n    \r\n   \r\n    \r\n    const arraySettings = Object.entries(settings)\r\n\r\n\r\n    const settingsVariables = arraySettings.map((el: any): any => {\r\n\r\n\r\n        const [key, value] = el\r\n\r\n        if (isParameterAnArray(value) !== true) {\r\n            addAttributeToElement(generatedForm, key, value)\r\n        }\r\n\r\n        if (isParameterAnArray(value) === true) {\r\n            const arrayValue = value\r\n\r\n            arrayValue.map((el: any) => {\r\n                //problem z otypowaniem el obiekt ze stringami \r\n                \r\n\r\n\r\n                switch (el.type) {\r\n                    case \"header\":\r\n                        // addAndCreateElement(generatedForm, \"busdfdfsdgtton\")\r\n                        // console.log(generatedForm);\r\n\r\n                        const newElement = document.createElement(\"h4\")\r\n                        generatedForm.appendChild(newElement)\r\n                        console.log(generatedForm);\r\n                        break;\r\n                    case \"email\":\r\n                        break;\r\n                    case \"textarea\":\r\n                        break;\r\n                    case \"submit\":\r\n                        break\r\n                    default:\r\n                        throw Error(\"Invalid element type\")\r\n\r\n                }\r\n            })\r\n        }\r\n    })\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\ngenerateFormOnPattern(testSettings)\r\n\r\n\r\n\r\n\r\n"]}