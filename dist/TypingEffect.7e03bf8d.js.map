{"version":3,"sources":["TypingEffect.ts"],"names":[],"mappings":";;AAAA,IAAM,SAAS,GAAG,CAAC,oBAAD,EAAuB,SAAvB,EAAkC,SAAlC,CAAlB;;AAEA,IAAA,YAAA;AAAA;AAAA,YAAA;AAMI,WAAA,YAAA,CAAY,qBAAZ,EAA2C,2BAA3C,EAAgF,uBAAhF,EAAiH;AAC7G,SAAK,qBAAL,GAA6B,qBAA7B;AACA,SAAK,2BAAL,GAAmC,2BAAnC;AACA,SAAK,uBAAL,GAA+B,uBAA/B,CAH6G,CAI7G;AACH;;AAED,EAAA,YAAA,CAAA,SAAA,CAAA,YAAA,GAAA,YAAA;AACI,QAAM,gBAAgB,GAAG,QAAQ,CAAC,aAAT,CAAuB,MAAI,KAAK,qBAAhC,CAAzB;AACA,IAAA,OAAO,CAAC,GAAR,CAAY,gBAAZ;AACA,QAAI,gBAAgB,KAAK,IAAzB,EAA+B,MAAM,IAAI,KAAJ,CAAU,iBAAV,CAAN;AAC/B,QAAI,gBAAgB,CAAC,WAAjB,KAAiC,IAArC,EAA2C,MAAM,IAAI,KAAJ,CAAU,yBAAV,CAAN;AAC3C,QAAM,WAAW,GAAG,gBAAgB,CAAC,WAArC;AACA,IAAA,OAAO,CAAC,GAAR,CAAY,KAAK,uBAAjB;AAGA,QAAM,qBAAqB,GAAG,KAAK,uBAAL,CAA6B,GAA7B,CAAiC,UAAC,UAAD,EAAW;AACtE,UAAM,aAAa,GAAG,UAAU,CAAC,KAAX,CAAiB,EAAjB,CAAtB;AACA,MAAA,OAAO,CAAC,GAAR,CAAY,aAAZ;AACA,MAAA,OAAO,CAAC,GAAR,CAAY,UAAZ;AACA,UAAM,gBAAgB,GAAG,aAAa,CAAC,GAAd,CAAkB,UAAC,EAAD,EAAK,CAAL,EAAM;AAC7C;AACA,QAAA,OAAO,CAAC,GAAR,CAAY,CAAC,GAAG,aAAa,CAAC,MAA9B,EAF6C,CAG7C;;AACA,YAAI,WAAW,CAAC,MAAZ,GAAqB,aAAa,CAAC,MAAvC,EAA+C,CAC3C;AAEA;AACA;AACA;AACH;AACJ,OAXwB,CAAzB,CAJsE,CAiBlF;AACY;AACI;AACA;AACA;AACP,KAtB6B,CAA9B;AAuBH,GAhCD;;AAkCA,EAAA,YAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACI,QAAM,aAAa,GAAG,QAAQ,CAAC,aAAT,CAAuB,MAAI,KAAK,2BAAhC,CAAtB;AAEA,QAAM,UAAU,GAAG,QAAQ,CAAC,aAAT,CAAuB,MAAvB,CAAnB,CAHJ,CAGsD;;AAClD,IAAA,UAAU,CAAC,SAAX,CAAqB,GAArB,CAAyB,YAAzB;AACA,IAAA,aAAa,CAAC,WAAd,CAA0B,UAA1B;AACA,SAAK,YAAL;AAEH,GARD;;AASJ,SAAA,YAAA;AAxDA,CAAA,EAAA;;AA2DA,IAAM,IAAI,GAAG,IAAI,YAAJ,CAAiB,MAAjB,EAAyB,WAAzB,EAAsC,SAAtC,CAAb,EAA8D;;AAC9D,IAAI,CAAC,OAAL,IAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA","file":"TypingEffect.7e03bf8d.js","sourceRoot":"..\\tasks\\typingEffect","sourcesContent":["const testArray = [\"Przykładowy string\", \"Coś tam\", \"coś coś\"]\r\n\r\nclass TypingEffect {\r\n    classOfanimateElement: string;\r\n    arrayOfStringsToAnimate: string[]\r\n    classOfAnimateElementParent: string\r\n\r\n\r\n    constructor(classOfanimateElement: string, classOfAnimateElementParent: string, arrayOfStringsToAnimate: string[]) {\r\n        this.classOfanimateElement = classOfanimateElement\r\n        this.classOfAnimateElementParent = classOfAnimateElementParent\r\n        this.arrayOfStringsToAnimate = arrayOfStringsToAnimate\r\n        // ...\r\n    }\r\n\r\n    mainFunction() {\r\n        const elementToAnimate = document.querySelector(`.${this.classOfanimateElement}`)\r\n        console.log(elementToAnimate)\r\n        if (elementToAnimate === null) throw new Error(\"Element is null\")\r\n        if (elementToAnimate.textContent === null) throw new Error(\"Element content is null\")\r\n        const elementText = elementToAnimate.textContent;\r\n        console.log(this.arrayOfStringsToAnimate)\r\n\r\n\r\n        const arrayOfSplitedStrings = this.arrayOfStringsToAnimate.map((dataString) => {\r\n            const splitedString = dataString.split(\"\")\r\n            console.log(splitedString)\r\n            console.log(dataString);\r\n            const singleCharacters = splitedString.map((el, i) => {\r\n                // el === splitedString[i]\r\n                console.log(i < splitedString.length)\r\n                // console.log(splitedString[i].length)\r\n                if (elementText.length < splitedString.length) {\r\n                    // 0 < 1\r\n\r\n                    // let element = \"\";\r\n                    // setInterval(() => {\r\n                    // }, 1000)\r\n                }\r\n            })\r\n\r\n//rekurencja\r\n            // actualIndex, elementArray\r\n                // actualIndex === elementLength\r\n                // elementToAnimate.textContent += elementArray[actualIndex] \r\n                // rekurencja(actualIndex + 1, elementArray)\r\n        })\r\n    }\r\n\r\n    appInit() {\r\n        const parentElement = document.querySelector(`.${this.classOfAnimateElementParent}`) as HTMLElement\r\n\r\n        const typingMark = document.createElement(\"span\") // paragraph::after content: \"|\" + animacja\r\n        typingMark.classList.add(\"typingMark\")\r\n        parentElement.appendChild(typingMark)\r\n        this.mainFunction()\r\n\r\n    }\r\n}\r\n\r\n\r\nconst test = new TypingEffect(\"test\", \"paragraph\", testArray) // \"Przykładowy string\"\r\ntest.appInit()\r\n\r\n// const fn = (givenNumber: number) => {\r\n//     console.log(givenNumber);\r\n//     if (givenNumber === 10) return;\r\n//     const newNumber = givenNumber + 1\r\n//     fn(newNumber)\r\n// }\r\n\r\n// fn(0)\r\n\r\n// const text = 'abcdef'\r\n// const editedText = text.slice(0, -1) //'abcde'"]}